# Adding Print Macro Support

Since the printing code to VGA buffer contained unsafe code, it makes our kernel prone to error and mishaps. So we need to encapsulate this behaviour both for reducing code replication and also moving unsafe code under a safe interface.

# VGA Text mode

Text Buffer which is displayed on the screen is 25 rows and 80 columns. It is the address of the VGA hardware and when any character is written to this location, it is displayed according to the rule.Each character takes 2 bytes or 16 bits of space where the first bytes denotes the character and the next byte denotes how the character is displayed.
The encoding of the first byte is similaer to ASCII but the correct information can be seen from thedetails of character set code page 437.

Another detail to note is that VGA text buffer is accessible via normal memory mapped I/O at 0xb8000. This is the reason we are able to read and write to the hardware location of the VGA buffer throug RAM operations like mov  without any gimmics. Its complimentary method is Port based I/O which don't use memory operations and instead rely on other special instructions like in/out. 
Read more bout serial bus and CPU address bus. An alternative to this I/O access is to use channels or I/O processors.

# Print Module

To provide print support we introduce it as a module. We start with a Writer Interface which includes creating enum for color, structs for ColorCode, ScreenChar and Bufferof VGA Screen.
We derive the copy, debug and eqality traits to make these data structures printable and comparable.
For enum we use u8 to be able to store the color codes as u8. Also to allow unused variants we add dead_code.

Another point to note is to match the layout of the VGA address mapping to that of out created structs. We need the data layout of colorCode to match that of u8 while ScreenChar to match that of C style. This is done by using attributes transparent for single field structs and repr(C) for multiple field to match C-style which is more compatible with hardware data layout mapping.
Other code details include adding static lifetime for buffer location of VGA hardware which doesn't change. The access for VGA location is unsafe by dereferencing so it is in an unsafe block.

Volatile: To prevent compiler to do unnecessary or erroneous optimization we wrap the ScreenChar into a Volatile wrapper. We write to the locations without reading back the buffer so the compiler might optimize such memory based I/O to do some optimizations of the writes.
Also writing an implementation of core::fmt:Write trait allow us to use write! macro for integers, decimals.

# Global Interface

Creating a Writer to write to VGA display need to be global, so that we don't have the unsafe code  at various places. This means we make the Writer static but statics are initialized at compile time.The compiler is not able to convert the raw pointer to references at compile time. So we use lazy_statics which allows lazily defining statics which evaluates only when the static value is used during runtime.
Another issue is the mutability of the static Writer. Since we are modifying this we need this to be mutable. But a static mutable is unsafe due to data races etc. Similarily if using immutable static with cell type like RefCell or UnsafeCell for interior mutability, there is an issues of Sync. To solve this use we can use Mutex from standard library but for our baremetal we can use spinlock which doesn't work based on threads.

For more details of Rust coding pardigm read:
1. Ownership: https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html

A data race is similar to a race condition and happens when these three behaviors occur:
Two or more pointers access the same data at the same time.
At least one of the pointers is being used to write to the data.
There’s no mechanism being used to synchronize access to the data.

At any given time, you can have either one mutable reference or any number of immutable references.
References must always be valid.

2. References with Lifetimes: https://doc.rust-lang.org/book/ch10-03-lifetime-syntax.html
We can define lifetimes for functions where rust cannot identify the returned value refers to the lidetime of which borrowed value. This is also used in Generic function, traits etc.
'static is a special lifetime which is valid for the duration of the whole program.

After writing a lot of Rust code, the Rust team found that Rust programmers were entering the same lifetime annotations over and over in particular situations. These situations were predictable and followed a few deterministic patterns. The developers programmed these patterns into the compiler’s code so the borrow checker could infer the lifetimes in these situations and wouldn’t need explicit annotations.

3. Immutables with interior mutability: https://doc.rust-lang.org/book/ch15-00-smart-pointers.html

Box<T> for allocating values on the heap
Rc<T>, a reference counting type that enables multiple ownership
Ref<T> and RefMut<T>, accessed through RefCell<T>, a type that enforces the borrowing rules at runtime instead of compile time

